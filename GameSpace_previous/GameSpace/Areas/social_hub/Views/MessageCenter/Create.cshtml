@model GameSpace.Models.Notification
@{
    ViewData["Title"] = "Add Notification";
    var recipientMode = (string)(ViewBag.RecipientMode ?? "specific");
}

<div class="container-fluid">
    <h1 class="h3 mb-4 text-gray-800">@ViewData["Title"]</h1>

    <div class="row">
        <div class="col-lg-9">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Notification Content</h6>
                    <a asp-action="Index" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-list-ul"></i> Back to List
                    </a>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="notifyForm">
                        @Html.AntiForgeryToken()
                        @if (!string.IsNullOrEmpty(ViewBag.AllErrors))
                        {
                            <div class="alert alert-danger">@ViewBag.AllErrors</div>
                        }
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <!-- Title: 20 characters -->
                        <div class="form-group">
                            <label asp-for="NotificationTitle" class="control-label"></label>
                            <input asp-for="NotificationTitle" class="form-control" placeholder="Enter notification title"
                                   maxlength="20" id="titleInput" />
                            <small class="form-text text-muted">
                                Maximum 20 characters, remaining <span id="titleRemain">20</span> characters.
                            </small>
                            <span asp-validation-for="NotificationTitle" class="text-danger"></span>
                        </div>

                        <!-- Content: 255 characters -->
                        <div class="form-group">
                            <label asp-for="NotificationMessage" class="control-label"></label>
                            <textarea asp-for="NotificationMessage" class="form-control" rows="4" placeholder="Enter notification content"
                                      maxlength="255" id="msgInput"></textarea>
                            <small class="form-text text-muted">
                                Maximum 255 characters, remaining <span id="msgRemain">255</span> characters.
                            </small>
                            <span asp-validation-for="NotificationMessage" class="text-danger"></span>
                        </div>

                        <!-- Source / Action -->
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label class="control-label">Source</label>
                                <select asp-for="SourceId" class="form-control" asp-items="ViewBag.Sources">
                                    <option value="">Please select source</option>
                                </select>
                                <span asp-validation-for="SourceId" class="text-danger"></span>
                            </div>
                            <div class="form-group col-md-6">
                                <label class="control-label">Action</label>
                                <select asp-for="ActionId" class="form-control" asp-items="ViewBag.Actions">
                                    <option value="">Please select action</option>
                                </select>
                                <span asp-validation-for="ActionId" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Recipient Mode -->
                        <div class="form-group">
                            <label class="font-weight-bold">Recipients</label>
                            <div class="custom-control custom-radio">
                                <input type="radio" id="modeSpecific" name="recipientMode" value="specific"
                                       class="custom-control-input" @(recipientMode == "specific" ? "checked" : "")>
                                <label class="custom-control-label" for="modeSpecific">Specific Users (Multi-select)</label>
                            </div>
                            <div class="custom-control custom-radio">
                                <input type="radio" id="modeAllUsers" name="recipientMode" value="all_users"
                                       class="custom-control-input" @(recipientMode == "all_users" ? "checked" : "")>
                                <label class="custom-control-label" for="modeAllUsers">All Users</label>
                            </div>
                            <div class="custom-control custom-radio">
                                <input type="radio" id="modeAllManagers" name="recipientMode" value="all_managers"
                                       class="custom-control-input" @(recipientMode == "all_managers" ? "checked" : "")>
                                <label class="custom-control-label" for="modeAllManagers">All Managers</label>
                            </div>
                            <div class="custom-control custom-radio">
                                <input type="radio" id="modeBoth" name="recipientMode" value="both"
                                       class="custom-control-input" @(recipientMode == "both" ? "checked" : "")>
                                <label class="custom-control-label" for="modeBoth">All Users + Managers</label>
                            </div>
                            <small class="form-text text-muted">
                                Managers will be sent via "Manager Account ↔ User Account" mapping; if no corresponding user account is found, they will be skipped.
                            </small>
                        </div>

                        <!-- Specific Users (Multi-select) -->
                        <div id="specificUsersSection" class="form-group" style="display: @(recipientMode == "specific" ? "block" : "none")">
                            <label class="control-label">Select Recipients (Multi-select)</label>
                            <select id="userSelect" class="form-control" multiple size="8">
                                <!-- Users will be loaded here -->
                            </select>
                            <small class="form-text text-muted">
                                Hold Ctrl/⌘ to multi-select. Selected list shown below.
                            </small>
                            <div class="mt-2">
                                <span class="badge badge-info" id="selectedCount">Selected 0 users</span>
                            </div>
                            <div class="mt-2">
                                <pre class="p-2 bg-light border" id="selectedPreview" style="max-height:180px; overflow:auto;">(No selection currently)</pre>
                            </div>
                        </div>

                        <!-- Optional: Group, Sender -->
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label asp-for="GroupId" class="control-label">Group (Optional)</label>
                                <select asp-for="GroupId" class="form-control" asp-items="ViewBag.Groups">
                                    <option value="">No group specified</option>
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label class="control-label" for="SenderManagerId">Sender Manager (Optional)</label>
                                <select id="SenderManagerId" class="form-control" asp-items="ViewBag.Managers">
                                    <option value="">No manager specified</option>
                                </select>
                                <small class="form-text text-muted">SenderId / SenderManagerId can be chosen or both empty.</small>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label class="control-label" for="SenderId">Sender User (Optional)</label>
                                <select id="SenderId" class="form-control" asp-items="ViewBag.Users">
                                    <option value="">No user specified</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <a asp-action="Index" class="btn btn-light mr-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Send</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Tips</h6>
                </div>
                <div class="card-body">
                    <div class="mb-1"><strong>Reminders</strong></div>
                    <ul class="mb-0 small">
                        <li>Title maximum 20 characters, content maximum 255 characters (Excel specification).</li>
                        <li>Can broadcast: All Users / All Managers / Both; or specify multiple users.</li>
                        <li>Manager sending will use "Manager Account ↔ User Account" mapping to send via User ID.</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Character count hints
        document.getElementById('titleInput').addEventListener('input', function() {
            const remain = 20 - this.value.length;
            document.getElementById('titleRemain').textContent = remain;
        });

        document.getElementById('msgInput').addEventListener('input', function() {
            const remain = 255 - this.value.length;
            document.getElementById('msgRemain').textContent = remain;
        });

        // Switch recipient mode
        document.querySelectorAll('input[name="recipientMode"]').forEach(radio => {
            radio.addEventListener('change', function() {
                const specificSection = document.getElementById('specificUsersSection');
                specificSection.style.display = this.value === 'specific' ? 'block' : 'none';
            });
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Multi-select preview
            const userSelect = document.getElementById('userSelect');
            const countBadge = document.getElementById('selectedCount');
            const preview = document.getElementById('selectedPreview');

            userSelect.addEventListener('change', function() {
                const sel = Array.from(this.selectedOptions);
                countBadge.textContent = `Selected ${sel.length} users`;
                if (sel.length > 0) {
                    preview.textContent = sel.map(opt => opt.text).join('\n');
                } else {
                    preview.textContent = '(No selection currently)';
                }
            });
        });
    </script>
}