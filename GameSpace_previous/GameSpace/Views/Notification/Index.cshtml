@model IEnumerable<GameSpace.Models.NotificationRecipient>
@{
    ViewData["Title"] = "ÈÄöÁü•‰∏≠ÂøÉ - GameSpace";
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>ÈÄöÁü•‰∏≠ÂøÉ - GameSpace</title>
    <style>
        :root{
            --bg:#eef3f8; --bg2:#ffffff; --ink:#1f2937; --muted:#64748b; --line:#e5e7eb;
            --surface:rgba(255,255,255,.75); --glass:rgba(255,255,255,.45);
            --accent:#7557ff; --accent-2:#34d2ff; --accent-3:#22c55e; --accent-4:#ef4444;
            --radius:18px; --radius-sm:12px; --shadow:0 18px 40px rgba(17,24,39,.12);
            --blur:14px;
        }
        body.dark{
            --bg:#0c111b; --bg2:#0a0f18; --ink:#e5edff; --muted:#9fb1c9; --line:#1e2b43;
            --surface:rgba(22,30,48,.65); --glass:rgba(18,24,39,.50);
            --shadow:0 18px 42px rgba(0,0,0,.35);
        }
        *{box-sizing:border-box} html,body{height:100%}
        body{
            margin:0; color:var(--ink); font:16px/1.65 system-ui,-apple-system,"Segoe UI",Roboto,"Noto Sans TC","PingFang TC","Microsoft JhengHei",sans-serif;
            background:
                radial-gradient(900px 500px at -10% -10%, rgba(117,87,255,.10), transparent 60%),
                radial-gradient(800px 460px at 110% 10%, rgba(52,210,255,.10), transparent 50%),
                linear-gradient(180deg, var(--bg), var(--bg2));
        }
        .wrap{max-width:1200px; margin:0 auto; padding:0 16px}
        
        /* Ê®ôÈ°å */
        .page-title{
            font-size:32px; font-weight:900; color:var(--ink); margin:40px 0 30px; text-align:center;
            display:flex; align-items:center; justify-content:center; gap:15px;
        }
        
        /* Áµ±Ë®àÂç°Áâá */
        .stats-row{
            display:flex; gap:20px; margin-bottom:30px; justify-content:center;
        }
        .stat-card{
            background:var(--glass); border:1px solid var(--line); border-radius:20px; 
            padding:20px; backdrop-filter:blur(var(--blur)); box-shadow:var(--shadow);
            text-align:center; min-width:150px;
        }
        .stat-value{
            font-size:24px; font-weight:900; color:var(--accent); margin-bottom:5px;
        }
        .stat-label{
            font-size:14px; color:var(--muted); text-transform:uppercase; font-weight:600;
        }
        
        /* Êìç‰ΩúÊåâÈàï */
        .actions{
            display:flex; gap:15px; margin-bottom:30px; justify-content:center; flex-wrap:wrap;
        }
        .btn{
            padding:12px 24px; border:none; border-radius:12px; font-weight:700;
            cursor:pointer; transition:all 0.3s ease; text-decoration:none; display:inline-block;
        }
        .btn-primary{
            background:var(--accent); color:#fff;
        }
        .btn-primary:hover{background:#6d28d9; transform:translateY(-2px)}
        .btn-secondary{
            background:var(--surface); color:var(--ink); border:1px solid var(--line);
        }
        .btn-secondary:hover{background:var(--line)}
        .btn-success{
            background:var(--accent-3); color:#fff;
        }
        .btn-success:hover{background:#16a34a; transform:translateY(-2px)}
        .btn-danger{
            background:var(--accent-4); color:#fff;
        }
        .btn-danger:hover{background:#dc2626; transform:translateY(-2px)}
        
        /* ÈÄöÁü•ÂàóË°® */
        .notifications-container{
            background:var(--glass); border:1px solid var(--line); border-radius:20px; 
            backdrop-filter:blur(var(--blur)); box-shadow:var(--shadow); overflow:hidden;
        }
        .notification-item{
            padding:20px; border-bottom:1px solid var(--line); transition:all 0.3s ease;
            position:relative;
        }
        .notification-item:hover{
            background:var(--surface);
        }
        .notification-item.unread{
            background:rgba(117,87,255,.05); border-left:4px solid var(--accent);
        }
        .notification-item.unread::before{
            content:''; position:absolute; top:20px; right:20px; width:8px; height:8px;
            background:var(--accent); border-radius:50%;
        }
        
        .notification-header{
            display:flex; justify-content:space-between; align-items:flex-start; margin-bottom:10px;
        }
        .notification-title{
            font-size:18px; font-weight:700; color:var(--ink); margin-bottom:5px;
        }
        .notification-time{
            font-size:12px; color:var(--muted);
        }
        .notification-content{
            color:var(--muted); line-height:1.5; margin-bottom:15px;
        }
        .notification-meta{
            display:flex; justify-content:space-between; align-items:center;
        }
        .notification-source{
            font-size:12px; color:var(--muted); background:var(--surface); padding:4px 8px; border-radius:6px;
        }
        .notification-actions{
            display:flex; gap:10px;
        }
        .btn-sm{
            padding:6px 12px; font-size:12px; border-radius:6px;
        }
        
        /* ÂÑ™ÂÖàÁ¥öÊ®ôÁ±§ */
        .priority-badge{
            padding:4px 8px; border-radius:12px; font-size:10px; font-weight:700;
            text-transform:uppercase; margin-left:10px;
        }
        .priority-low{
            background:#f3f4f6; color:#6b7280;
        }
        .priority-normal{
            background:#dbeafe; color:#2563eb;
        }
        .priority-high{
            background:#fef3c7; color:#d97706;
        }
        .priority-urgent{
            background:#fef2f2; color:#dc2626;
        }
        
        /* È°ûÂûãÊ®ôÁ±§ */
        .type-badge{
            padding:4px 8px; border-radius:12px; font-size:10px; font-weight:700;
            text-transform:uppercase; margin-left:10px;
        }
        .type-info{
            background:#dbeafe; color:#2563eb;
        }
        .type-warning{
            background:#fef3c7; color:#d97706;
        }
        .type-error{
            background:#fef2f2; color:#dc2626;
        }
        .type-success{
            background:#dcfce7; color:#166534;
        }
        
        /* Á©∫ÁãÄÊÖã */
        .empty-state{
            text-align:center; padding:80px 20px; color:var(--muted);
        }
        .empty-icon{font-size:64px; margin-bottom:20px}
        .empty-title{font-size:24px; font-weight:700; margin-bottom:10px; color:var(--ink)}
        .empty-desc{font-size:16px}
    </style>
</head>
<body>
    <div class="wrap">
        <h1 class="page-title">
            <span>üîî</span>
            ÈÄöÁü•‰∏≠ÂøÉ
        </h1>
        
        <!-- Áµ±Ë®àÊï∏Êìö -->
        <div class="stats-row">
            <div class="stat-card">
                <div class="stat-value" id="totalCount">@Model.Count()</div>
                <div class="stat-label">Á∏ΩÈÄöÁü•</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="unreadCount">@Model.Count(n => !n.IsRead)</div>
                <div class="stat-label">Êú™ËÆÄÈÄöÁü•</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="todayCount">@Model.Count(n => n.Notification.CreatedAt.Date == DateTime.Today)</div>
                <div class="stat-label">‰ªäÊó•ÈÄöÁü•</div>
            </div>
        </div>
        
        <!-- Êìç‰ΩúÊåâÈàï -->
        <div class="actions">
            <button class="btn btn-success" onclick="markAllAsRead()">Ê®ôË®òÂÖ®ÈÉ®Â∑≤ËÆÄ</button>
            <button class="btn btn-secondary" onclick="refreshNotifications()">Âà∑Êñ∞ÈÄöÁü•</button>
            <button class="btn btn-danger" onclick="clearAllNotifications()">Ê∏ÖÁ©∫ÈÄöÁü•</button>
        </div>
        
        <!-- ÈÄöÁü•ÂàóË°® -->
        <div class="notifications-container">
            @if (Model.Any())
            {
                @foreach (var recipient in Model)
                {
                    var notification = recipient.Notification;
                    var isUnread = !recipient.IsRead;
                    var priorityClass = $"priority-{notification.Priority.ToLower()}";
                    var typeClass = $"type-{notification.Type.ToLower()}";
                    
                    <div class="notification-item @(isUnread ? "unread" : "")" data-notification-id="@notification.NotificationId">
                        <div class="notification-header">
                            <div>
                                <div class="notification-title">
                                    @notification.Title
                                    <span class="priority-badge @priorityClass">@notification.Priority</span>
                                    <span class="type-badge @typeClass">@notification.Type</span>
                                </div>
                                <div class="notification-time">
                                    @notification.CreatedAt.ToString("yyyy/MM/dd HH:mm")
                                </div>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(notification.Content))
                        {
                            <div class="notification-content">@notification.Content</div>
                        }
                        
                        <div class="notification-meta">
                            <div class="notification-source">
                                @notification.NotificationSource.SourceName
                            </div>
                            <div class="notification-actions">
                                @if (isUnread)
                                {
                                    <button class="btn btn-primary btn-sm" onclick="markAsRead(@notification.NotificationId)">
                                        Ê®ôË®òÂ∑≤ËÆÄ
                                    </button>
                                }
                                <button class="btn btn-danger btn-sm" onclick="deleteNotification(@notification.NotificationId)">
                                    Âà™Èô§
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-icon">üîî</div>
                    <div class="empty-title">Êö´ÁÑ°ÈÄöÁü•</div>
                    <div class="empty-desc">ÊÇ®ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÈÄöÁü•</div>
                </div>
            }
        </div>
    </div>

    <script>
        function markAsRead(notificationId) {
            fetch('/Notification/MarkAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ notificationId: notificationId, userId: 1 })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                alert('Êìç‰ΩúÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶');
            });
        }
        
        function markAllAsRead() {
            if (confirm('Á¢∫ÂÆöË¶ÅÊ®ôË®òÊâÄÊúâÈÄöÁü•ÁÇ∫Â∑≤ËÆÄÂóéÔºü')) {
                fetch('/Notification/MarkAllAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId: 1 })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    alert('Êìç‰ΩúÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶');
                });
            }
        }
        
        function deleteNotification(notificationId) {
            if (confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÊ¢ùÈÄöÁü•ÂóéÔºü')) {
                fetch('/Notification/DeleteNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ notificationId: notificationId, userId: 1 })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    alert('Êìç‰ΩúÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶');
                });
            }
        }
        
        function clearAllNotifications() {
            if (confirm('Á¢∫ÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÈÄöÁü•ÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÊí§Èä∑ÔºÅ')) {
                // ÈÄôË£°ÊáâË©≤ÂØ¶ÁèæÊ∏ÖÁ©∫ÊâÄÊúâÈÄöÁü•ÁöÑÈÇèËºØ
                alert('Ê∏ÖÁ©∫ÈÄöÁü•ÂäüËÉΩÈñãÁôº‰∏≠...');
            }
        }
        
        function refreshNotifications() {
            location.reload();
        }
        
        // Ê∑ªÂä†Ë´ãÊ±ÇÈ©óË≠â‰ª§Áâå
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.createElement('form');
            form.style.display = 'none';
            form.innerHTML = '@Html.AntiForgeryToken()';
            document.body.appendChild(form);
        });
    </script>
</body>
</html>