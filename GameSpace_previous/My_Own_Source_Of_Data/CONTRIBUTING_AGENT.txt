# File: CONTRIBUTING_AGENT.txt
Agent Contribution Guidelines for GameSpace MVC Demo
(Single Source of Truth for process, constraints, area partition, runbook, and stage-gated testing)
## GLOBAL LANGUAGE RULE (MANDATORY)- All **NON-CODE** outputs MUST be in **Traditional Chinese (Taiwan, zh-TW)**.- This includes: commit messages, PR descriptions, logs/console output, documentation/READMEs, audit reports, progress/status lines, UI copy/labels/placeholders, and **ALL code comments** (C#, Razor, JS/TS, SQL comments, XML doc).- **DO NOT** translate code identifiers (class/method/variable names), file paths, or SQL/CLI keywords.
## Setup and Execution1. **Install prerequisites**: Visual Studio 2022 (or later) and SQL Server (2019/2022).2. **Execute the database script**: In SQL Server Management Studio (SSMS), run `./database.sql`. This creates **GameSpaceDatabase** with complete schema and initial seed data.3. **Open the project**: In Visual Studio 2022, load the GameSpace ASP.NET Core MVC solution.4. **Configure the connection string**: In `appsettings.json`, set the connection string (e.g., `DefaultConnection`) to your local SQL Server instance. **Do not** use EF migrations or alter the schema; the database is fully defined by `./database.sql`.5. **Run the application**: Build and run. The public site (GameSpace) should appear at the default localhost URL.6. **Login to Admin**: Use seeded admin accounts:   - `zhang_zhiming_01 / Password001@`   - `li_xiaohua_02 / Password001@`7. **Verify the Public site**: Navigate the public frontend (game forums, pet system, shop) as a normal user.   - Example public user: `dragonknight88 / Password001@`
*(These steps ensure a repeatable setup. The user runs `database.sql` and configures the connection string manually before running the app.)*
## Non-Modifiable Architecture Contract (DO NOT MODIFY THE SKELETON)- **Do not change** the existing MVC skeleton structure (folders, project layout, solution structure, namespaces).- **Do not** rename/move/delete existing folders, projects, or **Areas**.- **Do not** touch global `Program.cs`, global/root layouts, or any cross-cutting bootstrapping unless explicitly told.- **Do not** add or run EF Core migrations. The database schema and seed are defined **only** by `./database.sql`.
## Team Area Partition Policy (STRICT)- Work is organized **strictly** by ASP.NET Core MVC **Areas**. Each module lives inside its own Area.- **Your assigned Area:** `MiniGame`.  - The following four modules **must live together** under the same Area `MiniGame`:    1. **User_Wallet** (member points / coupons / e-vouchers)       - Owned tables in `./database.sql`:         - `User_Wallet`, `CouponType`, `Coupon`, `EVoucherType`, `EVoucher`, `EVoucherToken`, `EVoucherRedeemLog`, `WalletHistory`    2. **UserSignInStats**    3. **Pet**    4. **MiniGame**  - Place **all** controllers/services/models/views for these four modules under:    - `Areas/MiniGame/Controllers/`    - `Areas/MiniGame/Models/`    - `Areas/MiniGame/Services/`    - `Areas/MiniGame/Views/`  - Use an **Area-local layout only**:    - `Areas/MiniGame/Views/Shared/_Layout.cshtml`  - Route with `[Area("MiniGame")]` and standard MVC conventions (e.g., `/MiniGame/{controller}/{action}/{id?}`).
- **Other team modules:**  - Every other module lives in its **own, separate** Area (one module per Area).  - Examples: `Forum → Areas/Forum/**`, `MemberManagement → Areas/MemberManagement/**`, `OnlineStore → Areas/OnlineStore/**`, `Social features → Areas/social_hub/**`, `Admin → Areas/Admin/**` (SB Admin template).  - **No cross-Area mixing** of controllers/views/services. Keep boundaries strict.
## Frontend / Backend Separation & Assets- **Public vs Admin separation**:  - Admin UI lives in `Areas/Admin` and uses the **SB Admin** template.  - Admin assets/layouts **must not** be shared with Public Areas.- Public Areas (including `MiniGame`) use Bootstrap-based layouts (per `index.txt`) with an **Area-local** layout.- **No shared CSS/JS/layouts** between Public and Admin.  - If `MiniGame` needs assets, place them under `wwwroot/areas/minigame/` or reuse existing Public assets **without modifying** global/shared files.- All UI copy and comments **must be in zh-TW**.
## Database as Single Source of Truth- Treat `./database.sql` as the **authoritative** definition of the database schema.- **Do not** use EF Core migrations or alternate schemas. All changes to tables or data are made via `./database.sql`.
## Data Seeding via SQL (Realism Required)- Insert all sample/fake data using **SQL `INSERT`** statements (in `database.sql` or a separate seed file referenced by this document).- Ensure realism of seed data:  - Taiwanese names/content  - Asia/Taipei timestamps (e.g., sign-in dates, post times)  - Plausible popularity distributions (e.g., Zipf/log-normal)  - Plausible images/URLs (Unsplash / Lorem Picsum)- Any inline seed logic comments must be **zh-TW**.- Maintain **referential integrity** across User_Wallet-related tables (`Coupon` / `EVoucher` / `Token` / `RedeemLog` / `History`).
## Development Workflow Guidelines### Execution Mode (Background Agent)- Real file edits are allowed. The agent **may execute necessary CLI commands** to build/test (e.g., `dotnet build`, `dotnet test`).- Avoid interactive prompts; prefer non-interactive commands. Summarize actions and results in **zh-TW** logs.- All human-readable explanations in logs/PRs must be **zh-TW**.
### Incremental Work- Each iteration edits at most **3 files or 400 LOC**, then **build/test → commit → proceed**.- Commit messages must be written in **zh-TW**.
### Progress Logging (print at start **and** end of each major step)- Format: `整體進度: <overall>% | 目前階段: <stage>% | 狀態: <brief>`
### Manual Preconditions- The user will manually run the database script and configure the connection string.- Do **not** attempt to automate these actions beyond the instructions above.
## Stage-Gated Delivery & Test Pipeline (MANDATORY)The project advances **only** through explicit stages. **Every stage must reach zero errors and zero warnings** in build/tests **before** moving to the next stage. At **every** stage, sweep and remove TODO/FIXME/WIP placeholders, unimplemented stubs, perfunctory code, or **any** violation of this `CONTRIBUTING_AGENT.txt`. Violations are **fixed immediately**.
**Gate Rules (apply to *every* stage):**1. **Build clean**: no compilation errors **and** no warnings.2. **Tests clean**: all configured tests for the stage pass (see scope below).3. **Placeholder sweep**: search for `TODO|FIXME|TBD|NotImplemented|WIP|待補|未完成|占位|略` (case-insensitive; includes comments/strings). Remove/implement or file a zh-TW issue **and fix** before gate.4. **Spec compliance**: verify adherence to: Area boundaries, language rule, execution mode, DB single source of truth, Public/Admin separation, seeding realism, and MiniGame ownership.5. **Logs & commit**: write a zh-TW audit note in the change log, then commit using the template below. Print the progress line.
**Stages & Required Scopes:**- **Stage 0 — Toolchain & Repo Sanity**  - Validate solution opens; restore NuGet; verify `database.sql` compiles in SSMS (dry review); ensure `appsettings.json` placeholders are present; confirm Areas skeleton exists.  - **Tests:** none (smoke restore/build only). **Gate:** zero warnings.
- **Stage 1 — Big Architecture Skeleton**  - Establish folders, Area-local layout, base controllers, DI registrations (interfaces only), route attributes, and minimal view shells for `MiniGame` submodules.  - **Tests:** solution builds; minimal unit tests for DI registration and route discovery. **Gate:** zero warnings.
- **Stage 2 — Compile-to-Green Baseline**  - Wire models/viewmodels to match `./database.sql` (read-only where possible). No persistence changes.  - **Tests:** compile-time contracts + unit tests for model mapping. **Gate:** zero warnings; all unit tests pass.
- **Stage 3 — Functional Scaffolding**  - CRUD scaffolds/views per `MiniGame` modules; simple controller actions returning real data shapes (read-only for wallet/sign-in history initially).  - **Tests:** unit + light integration tests for controllers/view rendering. **Gate:** all pass; zero warnings.
- **Stage 4 — Feature Detailing**  - Implement real flows (e.g., sign-in action stub wired to contracts, pet attribute adjust UI binding); keep DB writes consistent with `database.sql`.  - **Tests:** deeper integration tests around service layer; begin E2E happy-path tests. **Gate:** all pass; zero warnings.
- **Stage 5 — Fine-Grain Polishing**  - UI/UX refinements (responsive, accessibility basics), query optimizations for hot paths (wallet aggregation, sign-in write path, pet reads), eliminate dead code.  - **Tests:** unit + integration regressions; expand E2E coverage. **Gate:** all pass; zero warnings.
- **Stage 6 — Hardening & Remediation**  - Security reviews (authZ/authN checks per Area), error handling, logging, rate limits where needed. Remove any remaining placeholders.  - **Tests:** negative tests, edge cases, performance micro-benchmarks where applicable. **Gate:** all pass; zero warnings.
- **Stage 7 — Pre-Release System Tests**  - Full **integration** + **end-to-end** + **smoke** sweep across Public & Admin (with MiniGame ownership respected). Verify seeding realism.  - **Gate:** green across integration/E2E/smoke; zero warnings.
- **Stage 8 — Final QA & Sign-off**  - Final accessibility checks, content proofreading (zh-TW), and production build review. Produce release notes (zh-TW).  - **Gate:** all green; zero warnings; release tag prepared.
**Red Build Policy:** If **any** stage produces errors or warnings, immediately stop progression, fix within the same stage (small-batch rule), re-run tests, and proceed **only** when clean.
## Audits (ALWAYS) & Issue Resolution### Violation Audit (before changes)- Language rule (all human-facing text/**all comments** in zh-TW)- Execution mode (cloud agent may run CLI build/test; avoid destructive ops; no EF migrations)- DB usage (no migrations; `./database.sql` only)- Seeding realism (MiniGame-owned tables covered)- Area boundary rules (MiniGame content stays in `Areas/MiniGame/**`)- Public/Admin separation, and any shared-asset violations
**Fix the top violations** in small batches (≤3 files/≤400 LOC), build/test, then commit after each batch (message in zh-TW).
### Code Quality Audit- Ensure style consistency, clear naming, proper layering, DI best practices, and separation of concerns. Notes must be in zh-TW.
### Performance Audit- Identify hot paths; measure time/memory; optimize slow or memory-intensive operations. Findings/fixes must be in zh-TW.  - Example foci: wallet aggregation queries, sign-in write paths, pet attribute reads
### Frontend UX Audit- Verify responsive layouts and intuitive interactions in `MiniGame` submodules (Wallet/SignIn/Pet/MiniGame). Record issues and recommendations in zh-TW.
### Issue Resolution- Document all issues (bugs, performance bottlenecks, UX flaws) and fix them. All logs/resolutions must be in zh-TW.
## MiniGame Area — Initial Delivery Scope (stay inside your Area)Within `Areas/MiniGame` **only**, deliver minimal, working CRUD scaffolds and views aligned with `./database.sql` for the four modules:
**a) User_Wallet**- Read-only list/detail for current member points and available Coupons/EVouchers.- Token & Redeem history browsable views (`EVoucherToken`, `EVoucherRedeemLog`, `WalletHistory`).- UI focus only; **do not** change schema. Data contracts align with `./database.sql`.
**b) UserSignInStats**- Daily sign-in log display for the current user.- Simple "sign" action stub (controller action + view) wired for UI and contracts (actual persistence must comply with `./database.sql`).
**c) Pet**- Pet profile read and attribute-adjust UI stubs (bind to `./database.sql` structures).- Keep Area-local layout and comments in zh-TW.
**d) MiniGame**- MiniGame list (browse available games) + basic create/edit/detail/delete stubs as UI.- Use standard MVC patterns; no cross-Area references.
- Use the Area-local layout: `Areas/MiniGame/Views/Shared/_Layout.cshtml`.- **Do not** modify global layouts. **Do not** step outside `Areas/MiniGame`.
## RUNBOOK — Auto-Start on `read CONTRIBUTING_AGENT.txt and begin`When the user issues a short start command like `read CONTRIBUTING_AGENT.txt and begin` (or similar), the agent **must** execute the following:
1. **Read this file fully** and restate (in zh-TW) the key checks you will enforce **this run**.2. **Enforce** the Non-Modifiable Architecture Contract and the Area Partition Policy; audit for any violations (especially MiniGame boundaries and Public/Admin separation).3. If the `MiniGame` Area is missing subfolders, create **only** the Area-local folders/files you need (`Controllers/Models/Services/Views/Shared`) without altering the skeleton elsewhere.4. **Enter Stage 0**, then proceed stage-by-stage per the **Stage-Gated Delivery & Test Pipeline** above. At each stage:   - Apply **Gate Rules** (zero errors, zero warnings, placeholder sweep, spec compliance).   - Implement the next minimal slice (≤3 files/≤400 LOC), then **build/test → commit** (zh-TW message).   - Print the progress line.5. **Continue** through stages until tokens are nearly exhausted or a logical checkpoint is reached.6. **Stop Condition & Next Run**   - Stop **only** when tokens are almost depleted or a checkpoint is reached.   - **Before stopping**, print **one** single-line `NEXT_RUN_PROMPT` that resumes exactly from the next `MiniGame` task/stage.   - Do **not** print `NEXT_RUN_PROMPT` until **after** at least one real **code change** and **one commit** in this run.
## Commit Message Template (zh-TW; use after each small batch)`[修正][MiniGame/] WHAT → HOW → VERIFY  WHAT：本次修改重點（對齊 ./database.sql 與新規範） HOW：具體作法（≤3 檔 / ≤400 行；維持骨架與 Area 邊界） VERIFY：建置/手測/頁面巡檢結果（簡述）`
**END OF FILE**